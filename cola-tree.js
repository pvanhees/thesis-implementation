// Generated by CoffeeScript 1.8.0
(function() {
  var load, xobj;

  xobj = new XMLHttpRequest();

  xobj.open("GET", 'graph.json', true);

  xobj.setRequestHeader("Content-type", "application/json");

  xobj.onreadystatechange = function() {
    var json;
    if (xobj.readyState === 4 && xobj.status === 200) {
      json = JSON.parse(xobj.responseText);
      return load(json);
    }
  };

  xobj.send();

  load = function(json) {
    var colaGraph, colad3, color, graph, graphEdges, graphNodes, height, node, nodeIndices, nodeRadius, path, svg, width;
    graph = new JsonGraph(json);
    color = d3.scale.category20();
    width = 1600;
    height = 900;
    colad3 = cola.d3adaptor().size([width, height]);
    svg = d3.select("body").append("svg").attr("width", width).attr("height", height);
    graphNodes = [];
    graphEdges = [];
    nodeIndices = {};
    graph.getNodes().forEach(function(node, i) {
      graphNodes.push({
        "name": node,
        "group": graph.getNodeProperty(node, "y")
      });
      return nodeIndices[node] = i;
    });
    graph.getEdgesAsObjects().forEach(function(e) {
      return graphEdges.push({
        "target": nodeIndices[e.target],
        "source": nodeIndices[e.source],
        "value": graph.getEdgeProperty(e.id, "weight")
      });
    });
    colaGraph = {
      "nodes": graphNodes,
      "links": graphEdges
    };
    nodeRadius = 5;
    colad3.nodes(colaGraph.nodes).links(colaGraph.links).symmetricDiffLinkLengths(5).start(30);
    svg.append('svg:defs').append('svg:marker').attr('id', 'end-arrow').attr('viewBox', '0 -5 10 10').attr('refX', 6).attr('markerWidth', 3).attr('markerHeight', 3).attr('orient', 'auto').append('svg:path').attr('d', 'M0 -5L10,0L0,5').attr('fill', '#000');
    path = svg.selectAll(".link").data(colaGraph.links).enter().append("svg:path").attr("class", "link");
    node = svg.selectAll(".node").data(colaGraph.nodes).enter().append("circle").attr("class", "node").attr("r", nodeRadius).style("fill", function(d) {
      return color(d.group);
    }).on("click", function(d) {
      return d.fixed = true;
    }).call(colad3.drag);
    node.append("title").text(function(d) {
      return d.name;
    });
    return colad3.on("tick", function() {
      path.attr('d', function(d) {
        var deltaX, deltaY, dist, normX, normY, sourcePadding, sourceX, sourceY, targetPadding, targetX, targetY;
        deltaX = d.target.x - d.source.x;
        deltaY = d.target.y - d.source.y;
        dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
        normX = deltaX / dist;
        normY = deltaY / dist;
        sourcePadding = nodeRadius;
        targetPadding = nodeRadius + 2;
        sourceX = d.source.x + (sourcePadding * normX);
        sourceY = d.source.y + (sourcePadding * normY);
        targetX = d.target.x - (targetPadding * normX);
        targetY = d.target.y - (targetPadding * normY);
        return 'M' + sourceX + ',' + sourceY + 'L' + targetX + ',' + targetY;
      });
      return node.attr("cx", function(d) {
        return d.x;
      }).attr("cy", function(d) {
        return d.y;
      });
    });
  };

}).call(this);
