// Generated by CoffeeScript 1.8.0
(function() {
  var load, xobj;

  xobj = new XMLHttpRequest();

  xobj.open("GET", 'graph.json', true);

  xobj.setRequestHeader("Content-type", "application/json");

  xobj.onreadystatechange = function() {
    var json;
    if (xobj.readyState === 4 && xobj.status === 200) {
      json = JSON.parse(xobj.responseText);
      return load(json);
    }
  };

  xobj.send();

  load = function(json) {
    var colaGraph, colad3, color, graph, graphEdges, graphNodes, height, link, node, nodeIndices, svg, width;
    graph = new JsonGraph(json);
    color = d3.scale.category20();
    width = 1600;
    height = 900;
    colad3 = cola.d3adaptor().size([width, height]);
    svg = d3.select("body").append("svg").attr("width", width).attr("height", height);
    graphNodes = [];
    graphEdges = [];
    nodeIndices = {};
    graph.getNodes().forEach(function(node, i) {
      graphNodes.push({
        "name": node,
        "group": graph.getNodeProperty(node, "y")
      });
      return nodeIndices[node] = i;
    });
    graph.getEdgesAsObjects().forEach(function(e) {
      return graphEdges.push({
        "target": nodeIndices[e.target],
        "source": nodeIndices[e.source],
        "value": graph.getEdgeProperty(e.id, "weight")
      });
    });
    colaGraph = {
      "nodes": graphNodes,
      "links": graphEdges
    };
    colad3.nodes(colaGraph.nodes).links(colaGraph.links).symmetricDiffLinkLengths(5).start(30);
    link = svg.selectAll(".link").data(colaGraph.links).enter().append("line").attr("class", "link").style("stroke", "#999").style("stroke-width", function(d) {
      return Math.sqrt(d.value);
    });
    node = svg.selectAll(".node").data(colaGraph.nodes).enter().append("circle").attr("class", "node").attr("r", 5).style("fill", function(d) {
      return color(d.group);
    }).on("click", function(d) {
      return d.fixed = true;
    }).call(colad3.drag);
    node.append("title").text(function(d) {
      return d.name;
    });
    return colad3.on("tick", function() {
      link.attr("x1", function(d) {
        return d.source.x;
      }).attr("y1", function(d) {
        return d.source.y;
      }).attr("x2", function(d) {
        return d.target.x;
      }).attr("y2", function(d) {
        return d.target.y;
      });
      return node.attr("cx", function(d) {
        return d.x;
      }).attr("cy", function(d) {
        return d.y;
      });
    });
  };

}).call(this);
